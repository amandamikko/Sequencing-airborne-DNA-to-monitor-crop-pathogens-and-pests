#Calculate number of mapped reads to subsample for different species

# stack_summary_file should be a csv-file describing how many air filter reads map to the lowly abundant species
#First column should contain taxid, Last colun should contain number of mapped reads.
stack_summary_file = "Summary_total_amount_of_mapped_reads_per_species.txt" 
summary_stack_dict = {}
with open(stack_summary_file, "r") as summary_f:
    for line in summary_f:
        split_line = line.strip("\n").split(",")
        tax = split_line[0]
        nr_stacks = int(split_line[-1])
        summary_stack_dict[tax] = nr_stacks

#Compare contig lengths and subsample equal coverage for reads generated from genomes in the same ganera as the genomes specified below
pair_list = [["44670", "GCA_019925205_1_ASM1992520v1_genomic", "Metopolophium dirhodum"]]#, ["4787", "GCA_000142945_1_ASM14294v1_genomic", "Phytophthora infestans"], ["40932", "GCA_020882245_1_ASM2088224v1_genomic", "Rhopalosiphum padi"], ["44664", "GCA_019425605_1_ASM1942560v1_genomic", "Sitobion avenae"], ["27344", "GCA_002873125_1_ASM287312v1_genomic", "Puccinia coronata"], ["27345", "GCA_007896445_1_ASM789644v1_genomic", "Puccinia hordei"], ["1431903", "GCA_921294245_1_PGI_MELIAE_v1_genomic", "Brassicogethes aeneus"]]
#Dictionary that contains informatin about what genomes had reads mapped to them (keys) and a list containing information about what genomes the mapped reads were generated from (values)
generated_GCA_dict = {"GCA_019925205_1_ASM1992520v1_genomic":["GCA_019925205_1_ASM1992520v1_genomic"], "GCA_921294245_1_PGI_MELIAE_v1_genomic":["GCA_921294245_1_PGI_MELIAE_v1_genomic"], "GCA_000142945_1_ASM14294v1_genomic": ["GCA_000142945_1_ASM14294v1_genomic", "GCA_000247585_2_PP_INRA-310_V2_genomic", "GCA_016880985_1_ASM1688098v1_genomic", "GCA_033557915_1_HumboldtARI_Pten_1_0_genomic"], "GCA_020882245_1_ASM2088224v1_genomic": ["GCA_003676215_3_ASM367621v3_genomic", "GCA_020882245_1_ASM2088224v1_genomic", "GCA_036289425_1_JGU_Rn_01_genomic"], "GCA_019425605_1_ASM1942560v1_genomic": ["GCA_008086715_1_ASM808671v1_genomic", "GCA_019425605_1_ASM1942560v1_genomic"]}

#Specify name of output
output_file = "nr_reads_to_subsample_from_generated.txt"
with open(output_file, "w") as out_f:
    #Go through list of genomes to which generated reds were mapped
    for pair in pair_list:
        taxid = pair[0]
        GCA = pair[1]
        mapped_reads = summary_stack_dict[taxid]
        out_f.write("Reads to subsample after mapping to {} (genome: {}, taxid: {})\n".format(pair[2], GCA, taxid))
        #contig_lengths_file describe lengh of all scaffold in a genome, generated by running get_scaffold_lengths_from_fasta.py
        contig_lengths_file = "/proj/nobackup/snic2019-35-73/private/amanda/generate_classify/contig_summaries/{}.txt".format(GCA)
        #Get total length of genome from individual scaffold lengths described by the variable contig_lengths_file
        total_target_length = 0
        with open(contig_lengths_file, "r") as cl_file:
            for line in cl_file:
                split_line = line.strip("\n").split(",")
                contig = split_line[0]
                length = int(split_line[1])
                total_target_length += length
        #Get all genomes from which reads were generated and mapped to the current genome/taxid that is beeing evaluated
        generated_GCA_list = generated_GCA_dict[GCA]
        #Go through all genomes from which genomes were generated
        for generated_GCA in generated_GCA_list:
            
            contig_lengths_file = "/proj/nobackup/snic2019-35-73/private/amanda/generate_classify/contig_summaries/{}.txt".format(generated_GCA)
            #Get length of genome for the current genome from which reads were generated by adding all scaffold lengths of the genome to eachother
            total_length = 0
            with open(contig_lengths_file, "r") as cl_file:
                for line in cl_file:
                    split_line = line.strip("\n").split(",")
                    contig = split_line[0]
                    length = int(split_line[1])
                    total_length += length
            #Calculate how many reads to subsample from the genome to have them represent an coverage over the genome from which the reads were generated that is equal to the coverage of the number of mapped reads from the air filters over the evaluated genome
            nr_reads_to_subsample = (float(total_length)/float(total_target_length))*mapped_reads
            out_f.write("Number of reads to subsample from {}: {}".format(generated_GCA, str(round(nr_reads_to_subsample))))